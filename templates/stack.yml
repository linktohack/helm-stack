{{- $Values := .Values -}}
{{- $Release := .Release -}}
{{/* volumes */}}
{{- range $volName, $volValue := include "stack.helpers.volumes" (dict "Values" $Values) | fromYaml -}}
{{/* volumes: pv */}}
{{-   if and (not (get $volValue "external")) (ne (get $volValue "type") "emptyDir") -}}
{{-     if not (get $volValue "dynamic") -}}
{{-       $pv := include "stack.pv" (dict "volName" $volName "volValue" $volValue "Values" $Values "Release" $Release) | fromYaml -}}
{{-       $override := $Values | pluck "volumes" | first | default dict | pluck (get $volValue "originalName") | first | default dict | pluck "PV" | first | default dict }}
---
{{ $pv | merge $override | toYaml }}
{{-     end -}}
{{/* volumes: pvc */}}
{{-     if or (ne (get $volValue "deploymentKind") "StatefulSet") (not (get $volValue "dynamic")) -}}
{{-       $pvc := include "stack.pvc" (dict "volName" $volName "volValue" $volValue) | fromYaml -}}
{{-       $override := $Values | pluck "volumes" | first | default dict | pluck (get $volValue "originalName") | first | default dict | pluck "PVC" | first | default dict }}
---
{{ $pvc | merge $override | toYaml }}
{{-     end -}}
{{-   end -}}
{{- end -}}
{{/* volumes: end */}}
{{/* configs */}}
{{- range $volName, $volValue := include "stack.helpers.configs" (dict "Values" $Values) | fromYaml -}}
{{-   if not (get $volValue "external") -}}
{{-     $config := include "stack.configMap" (dict "volName" $volName "volValue" $volValue "Values" $Values "Release" $Release) | fromYaml -}}
{{-     $override := $Values | pluck "configs" | first | default dict | pluck (get $volValue "originalName") | first | default dict | pluck "ConfigMap" | first | default dict }}
{{-     if $config }}
---
{{ $config | merge $override | toYaml }}
{{-     end -}}
{{-   end -}}
{{- end -}}
{{/* configs: end */}}
{{/* secrets */}}
{{- range $volName, $volValue := include "stack.helpers.secrets" (dict "Values" $Values) | fromYaml -}}
{{-   if not (get $volValue "external") -}}
{{-     $secret := include "stack.secret" (dict "volName" $volName "volValue" $volValue "Values" $Values "Release" $Release) | fromYaml -}}
{{-     $override := $Values | pluck "secrets" | first | default dict | pluck (get $volValue "originalName") | first | default dict | pluck "Secret" | first | default dict }}
{{-     if $secret }}
---
{{ $secret | merge $override | toYaml }}
{{-     end -}}
{{-   end -}}
{{- end -}}
{{/* secrets: end */}}
{{/* services */}}
{{- range $name, $service:= .Values.services }}
{{/* services: clusterIP */}}
{{-   $clusterIP := include "stack.service.clusterIP" (dict "name" $name "service" $service "Values" $Values "Release" $Release) | fromYaml -}}
{{-   $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck "ClusterIP" | first | default dict -}}
{{-   if $clusterIP }}
---
{{ $clusterIP | merge $override | toYaml }}
{{-   end }}
{{/* services: nodePort */}}
{{-   $nodePort := include "stack.service.nodePort" (dict "name" $name "service" $service "Values" $Values "Release" $Release) | fromYaml -}}
{{-   $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck "NodePort" | first | default dict -}}
{{-   if $nodePort }}
---
{{ $nodePort  | merge $override | toYaml }}
{{-   end }}
{{/* services: loadBalancer */}}
{{-   $ports := include "stack.helpers.normalizePorts" $service.ports | fromYaml -}}
{{-   range $protocol, $ports := pick $ports "tcp" "udp" -}}
{{-     if $ports }}
{{-       $loadBalancer := include "stack.service.loadBalancer" (dict "name" $name "protocol" $protocol "ports" $ports) | fromYaml -}}
{{-       $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck "LoadBalancer" | first | default dict | pluck $protocol | first | default dict -}}
{{-       if $loadBalancer }}
---
{{ $loadBalancer | merge $override | toYaml }}
{{-       end -}}
{{-     end -}}
{{-   end -}}
{{/* services: ingress */}}
{{-   range $segment, $ingressValue := include "stack.helpers.ingresses" (dict "name" $name "service" $service "Values" $Values "Release" $Release) | fromYaml -}}
{{-     if and (get $ingressValue "hosts") (get $ingressValue "port") -}}
{{-       $ingress := include "stack.ingress" (dict "name" $name "segment" $segment "ingress" $ingressValue) | fromYaml -}}
{{-       $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck "Ingress" | first | default dict | pluck $segment | first | default dict }}
---
{{ $ingress | merge $override | toYaml }}
{{-     end -}}
{{-     if get $ingressValue "auth" -}}
{{-       $auth := include "stack.ingress.auth"  (dict "name" $name "segment" $segment "ingress" $ingressValue) | fromYaml -}}
{{-       $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck "Auth" | first | default dict | pluck $segment | first | default dict}}
---
{{ $auth | merge $override | toYaml }}
{{-     end -}}
{{-   end }}
{{/* services: deployment */}}
{{-   $deployment := include "stack.deployment" (dict "name" $name "service" $service "Values" $Values "Release" $Release) | fromYaml -}}
{{-   $kind := get $deployment "kind" -}}
{{-   $override := $Values | pluck "services" | first | default dict | pluck $name | first | default dict | pluck $kind | first | default dict -}}
---
{{/* $override | toYaml | fail */}}
{{ include "stack.helpers.mergeDictAndList" (list $deployment $override) }}
{{- end -}}
{{/* services: end */}}
{{/* Raw */}}
{{- range $raw := .Values.Raw }}
---
{{ $raw | toYaml -}}
{{- end -}}
{{/* Raw: end */}}
